// Marius' code interpretation: open callback (block of script) to specify 'initial' simulation details
initialize() {

	// fitness-affecting mutations
	// Marius' code interpretation:
	// Specifying two types of mutations ('alleles'): m1 and m2. 
	// Dominance effect of each allele is currently set to 0.5. This should mean that heterozygous individuals have intermediate 	
	// fitness (codominance)?
	// New mutations of each type are drawn from a Distribution of Fitness Effects (DFE), curently a fixed effect 'f'
	// Fixed fitness effect = 0.0. Hence, these mutations are currently neutral and should not affect fitness?
	initializeMutationType("m1", 0.5, "f", 0.0); // p1 adaptive
	initializeMutationType("m2", 0.5, "f", 0.0); // p2 adaptive
	
	// inversion mutations
	// Marius' code interpretation: two new mutation types, same dominance effect, both with a fixed selective effect of 0.2. 
	// These mutations will be used for a third locus (the inversion), modelled as a recombination modifier
	// Marius question: what I don't understand yet is why the inversion itself should have a fitness effect?
	initializeMutationType("m3", 0.5, "f", 0.2); // the p1 inversion 
	initializeMutationType("m4", 0.5, "f", 0.2); // the p2 inversion 
	
	// mutation rates for each class of locus (loci 0-1: fitness, locus 2: inversion)
	// formatted like: c(rate1,rate2), c(end1,end2)
	// Marius: I don't understand this call yet. How does this relate to the mutations at the 3 loci? 
	initializeMutationRate(c(0, 0), c(1, 2));

	// disallow substitution conversion  for inversion
	// Marius comment: makes sense. I assume the main benefit is being able to track the inversion until the end of the simualtion 
	// irrespective of whether or not it fixes?  I wonder whether we should specify the same for m1 and m2, making sure to treat all 
	// mutations the same way? Probably won't matter though.
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
	
	// colors for slimgui
	m1.color = "blue";
	m2.color = "red";
	m3.color = "blue"; 
	m4.color = "red";

	// genomic elements for the above mutation classes
	// Marius' code interpretation:
	// g1 is the genomic element affected by mutations of type m1 and m2. m1 and m2 initially occur at the same frequency (0.5).
	// Just curious: what would happen if the two frquencies did not add up to 1, or be grater than 1? Would slim throw an error?
	initializeGenomicElementType("g1", c(m1, m2), c(0.5, 0.5));
	// The genomic element g1 is currently of length 2. That is, it has two loci: locus 0 and 1.
	initializeGenomicElement(g1, 0, 1);
	
	// g4 is the inversion "locus"
	// Marius' code interpretation:
	// Same as above. This concerns the inversion, in which mutations of type m3 and m4 occur. 
	initializeGenomicElementType("g4", c(m3, m4), c(0.5, 0.5));
	// The genomic element g4 is currently of length 1. That is, it has one locus: locus 2.
	initializeGenomicElement(g4, 2, 2);
	
	// recombination
	// base rate also needs to be very high to see any recombination
	initializeRecombinationRate(1e-2);
	
	//	constant for all-way migration rate
	// Marius' code interpretation:
	// Migration rate is set to be constant and involves 1% of the indiivuals of a subpopulation to move every generation
	// What does this mean when there are more than just one neighbouring deme? Will this increase the total number of immigrants or 
	// not?
	defineConstant("migration_rate", 0.01); 
}

// divergent selection fitness callbacks

// m1 has negative s in p2
// Invert the selection coefficient to create divergent selection. Circumvents the 'relative fitness' implementation (default) in slim,
// with the benefit that we get explicit selection coefficients. 
fitness(m1, p2) { 
	if (homozygous)
 		return 1.0 + (-1 * mut.selectionCoeff);
 	else
 		return 1.0 + (mut.mutationType.dominanceCoeff * -1 * mut.selectionCoeff);
}

// m2 has negative s in p1
fitness(m2, p1) { 
	if (homozygous)
 		return 1.0 + (-1 * mut.selectionCoeff);
 	else
 		return 1.0 + (mut.mutationType.dominanceCoeff * -1 * mut.selectionCoeff);
}


// m1 has negative s in p3, but only for the second fitness locus 
fitness(m1, p3) { 
	// Summing the vector of 0,0 or 0,1 or 1,1. So it's either 0, 1, or 2. 
	// 
	if (sum(individual.genomes.containsMarkerMutation(m1, 1) == 0))
		return relFitness;
 	else if (sum(individual.genomes.containsMarkerMutation(m1, 1) == 1))
 		return relFitness + (mut.mutationType.dominanceCoeff * -1 * mut.selectionCoeff);
 	else if (sum(individual.genomes.containsMarkerMutation(m1, 1) == 2))
 		return 1.0 + (-1 * mut.selectionCoeff);
}

// m2 has negative s in p3, but only for the first fitness locus 
fitness(m2, p3) { 

	if (sum(individual.genomes.containsMarkerMutation(m2, 0) == 0))
		return relFitness;
 	else if (sum(individual.genomes.containsMarkerMutation(m2, 0) == 1))
 		return relFitness + (mut.mutationType.dominanceCoeff * -1 * mut.selectionCoeff);
 	else if (sum(individual.genomes.containsMarkerMutation(m2, 0) == 2))
 		return 1.0 + (-1 * mut.selectionCoeff);
}

// model the inversion as a genome-wide recombination suppressor
// Marius' code interpretation: I assume this is how one commonly simulates inversions in slim? Just to make sure I get this right:
// If at the third 'inversion' locus an individaul is homozygous, recombination can happen freely between any of the three loci.
// If an individual is heterozygous at the inversion locus, no recombination can happen between any of the 3 loci. 
// So to track the frequency of the inversion, one would simply track the allele frequencies of the third locus? 
// What I haven't wrapped my head around yet is that this means for the actual inversion-haplotype: could any allelic combination at
// loci 0 and 1 become linked to the inversion-locus? In other words, by just tracking the inversion at locus 2, we won't know what
// the inversion consists of at loci 0 and 1?
recombination() {
	
	// if you are homozygous at the inversion locus, do nothing (allow recombination)
	// (this will need to be scripted to scale better)
	// In other words: if homozygous, function return 'FLASE'. That means, no recombination will happen.
	if (genome1.containsMarkerMutation(m3, 2) == genome2.containsMarkerMutation(m3, 2))
		return F;
	if (genome1.containsMarkerMutation(m4, 2) == genome2.containsMarkerMutation(m4, 2))
		return F;
	
	// otherwise, remove all proposed breakpoints (prevent recombination)
	breakpoints = -1;
	return T;
	
}

1 early(){
	
	// set up the populations

	// create initial populations
	sim.addSubpop("p1", 500); 
	sim.addSubpop("p2", 500);
	sim.addSubpop("p3", 500);
	
	// migration rates
	p1.setMigrationRates(p2, migration_rate);
	p1.setMigrationRates(p3, migration_rate);
	
	p2.setMigrationRates(p1, migration_rate);
	p2.setMigrationRates(p3, migration_rate);
	
	p3.setMigrationRates(p1, migration_rate);
	p3.setMigrationRates(p2, migration_rate);
	

}

1 late(){

	// add matching adaptive alleles & inverisons to every individual
	// (i.e. everything is fixed)
	p1.individuals.genomes.addNewDrawnMutation(m1, 0);
	p1.individuals.genomes.addNewDrawnMutation(m1, 1);
	p1.individuals.genomes.addNewDrawnMutation(m3, 2);
	
	p2.individuals.genomes.addNewDrawnMutation(m2, 0);
	p2.individuals.genomes.addNewDrawnMutation(m2, 1);
	p2.individuals.genomes.addNewDrawnMutation(m4, 2);

	// p3 starts with the p1 arrangement fixed	
	p3.individuals.genomes.addNewDrawnMutation(m3, 2);
	
}

5000 late(){

	sim.simulationFinished();

}



