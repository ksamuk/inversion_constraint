initialize() {

		
	// fitness-affecting mutations
	initializeMutationType("m1", 0.5, "f", 0.1); // p1 adaptive
	initializeMutationType("m2", 0.5, "f", 0.1); // p2 adaptive
	
	// inversion mutations
	initializeMutationType("m3", 0.5, "f", 0.0); // the p1 inversion 
	initializeMutationType("m4", 0.5, "f", 0.0); // the p2 inversion 
	
	// mutation rates for each class of locus (loci 0-1: fitness, locus 2: inversion)
	// formatted like: c(rate1,rate2), c(end1,end2)
	initializeMutationRate(c(0.005, 0), c(1, 2));

	// disallow substitution conversion  for inversion
	// think about stackPolicy() (keep last)
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
	
	// colors for slimgui
	m1.color = "blue";
	m2.color = "red";
	m3.color = "blue"; 
	m4.color = "red";

	// genomic elements for the above mutation classes
	initializeGenomicElementType("g1", c(m1, m2), c(0.5, 0.5));
	initializeGenomicElement(g1, 0, 1);
	
	// g4 is the inversion "locus"
	initializeGenomicElementType("g4", c(m3, m4), c(0.5, 0.5));
	initializeGenomicElement(g4, 2, 2);
	
	// recombination
	// base rate also needs to be very high to see any recombination
	initializeRecombinationRate(1e-2);
	
	//	constant for all-way migration rate
	defineConstant("migration_rate", 0.01); 
}

// divergent selection fitness callbacks

// m1 has negative s in p2
fitness(m1, p2) { 
	if (homozygous)
 		return 1.0 + (-1 * mut.selectionCoeff);
 	else
 		return 1.0 + (mut.mutationType.dominanceCoeff * -1 * mut.selectionCoeff);
}

// m2 has negative s in p1
fitness(m2, p1) { 
	if (homozygous)
 		return 1.0 + (-1 * mut.selectionCoeff);
 	else
 		return 1.0 + (mut.mutationType.dominanceCoeff * -1 * mut.selectionCoeff);
}


// model the inversion as a genome-wide recombination suppressor
recombination() {
	
	// if you are homozygous at the inversion locus, do nothing (allow recombination)
	// (this will need to be scripted to scale better)
	if (genome1.containsMarkerMutation(m3, 2) == genome2.containsMarkerMutation(m3, 2))
		return F;
	if (genome1.containsMarkerMutation(m4, 2) == genome2.containsMarkerMutation(m4, 2))
		return F;
	
	// otherwise, remove all proposed breakpoints (prevent recombination)
	breakpoints = -1;
	return T;
	
}

1 early(){
	
	// set up the populations

	// create initial populations
	sim.addSubpop("p1", 500); 
	sim.addSubpop("p2", 500);
	
	// migration rates
	// think about scaling for total number of migrants
	p1.setMigrationRates(p2, migration_rate);
	p2.setMigrationRates(p1, migration_rate);

}

1 late(){

	// add matching adaptive alleles & inverisons to every individual
	// (i.e. everything is fixed)
	p1.individuals.genomes.addNewDrawnMutation(m1, 0);
	p1.individuals.genomes.addNewDrawnMutation(m1, 1);
	p1.individuals.genomes.addNewDrawnMutation(m3, 2);
	
	p2.individuals.genomes.addNewDrawnMutation(m2, 0);
	p2.individuals.genomes.addNewDrawnMutation(m2, 1);
	p2.individuals.genomes.addNewDrawnMutation(m4, 2);
	
}

5000 late(){

	sim.simulationFinished();

}



