i
good.A<-NULL#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i])==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}
length(grep("N",A[,i])==0
length(grep("N",A[,i]))==0
good.A<-NULL#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}
good.A
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]
dim(A.good)
A.good[,1:10]
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]
B.good[,1:10]
intersect(names(B.good,A.good))
intersect(names(B.good),names(A.good))
intersect(names(B.good,A.good))#
[1:5]
intersect(names(B.good,A.good))[1:5]
intersect(names(B.good,A.good))
intersect(names(B.good),names(A.good))
shared.pos<-intersect(names(B.good),names(A.good))
shared.pos[1:5]
intersect(names(B.good),shared.pos)
B.good[,c(intersect(names(B.good),shared.pos))]
A.good<-A.good[,c(intersect(names(A.good),shared.pos))]
A.good[,1:10]
B.good[,1:10]
B.good<-B.good[,shared.pos]
A.good<-A.good[,shared.pos]
B.good[,1:10]
A.good[,1:10]
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr25.BW.L.F.repl"#
ID.B<-"cr25.BW.S.M.repl"#
#
A<-d[grep(ID.A,d$ID),]#
B<-d[grep(ID.B,d$ID),]#
#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]
dim(B.good)
dim(A.good)
A.good[,1:10]
B.good[,1:10]
B.good[,1:30]
A.good[,1:30]
A.good[,1:50]
B.good[,1:50]
good<-rbind.data.frame(B.good,A.good)
good[,1:19]
retain<-NULL#
for(i in 5:length(good[1,])){#
	retain<-c(retain,length(unique(good[,i]))!=1))}
retain<-NULL#
for(i in 5:length(good[1,])){#
	retain<-c(retain,length(unique(good[,i]))!=1)}
retain
length(unique(good[,i]))!=1
retain<-NULL#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}
retain<-NULL#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}
retain
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}
final<-good[,retain]
final[,1:10]
final[,1:40]
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")
d[,1:5]
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr7.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr7.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
#
A<-d[grep(ID.A,d$ID),]#
B<-d[grep(ID.B,d$ID),]#
#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]
dim(final)
final
head(t(final))
t(final)
A[,1:10]
which(A[1,]=="N")
length(which(A[1,]=="N"))
dim(A)
dim(A)[2]
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))dim(B)[2],3)*100
A.repl1.Ns
A.repl2.Ns
round(length(which(A[2,]=="N"))/dim(A)[2],3)
length(which(A[2,]=="N")
A[2,]
table(A[2,])
A[2,]
A.repl2.gt<-A[,which(which(A[2,]=="N"))]A[2,]
which(which(A[2,]=="N"))
A[,which(A[1,]=="N")]
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]
dim(tempA)
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]
A.repl1.Ns
A.repl2.Ns
round(tempA/dim(A)[2],3)*100
round(tempA/dim(A)[2],3)
tempA/dim(A)[2]
tempA
round(dim(tempA)[2]/dim(A)[2],3)*100
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr7.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr7.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]
final
names(final)
unlist(strsplit(names(final),"_"))
even(unlist(strsplit(names(final),"_")))
evens <- function(x) subset(x, x %% 2 == 0)
evens(unlist(strsplit(names(final),"_")))
evens <- function(x){#
  vector <- c()#
  for (i in 1:length(x)){#
    if (i %% 2 == 0){#
      vector[i] <- vector[i] + i#
    }#
  }#
  vector#
}
evens(unlist(strsplit(names(final),"_")))
unlist(strsplit(names(final),"_"))
chr.pos<-unlist(strsplit(names(final),"_"))
even(1:length(chr.pos))
1:length(chr.pos)
chr.pos[seq(1, length(chr.pos), 2)]
chr<-chr.pos[seq(1, length(chr.pos), 2)+1]
chr
chr<-chr.pos[seq(1, length(chr.pos), 2)-1]
chr
chr.pos[seq(1, length(chr.pos), 2)-1]
chr.pos[seq(1, length(chr.pos), 2)+1]
head(chr.pos)
final[,1:4]
final
final[,1:4]
final[,1:6]
chr.pos<-unlist(strsplit(names(final)-[c(1:4)],"_"))
chr.pos<-unlist(strsplit(names(final[,-1:4]),"_"))
final[,-1:4]
final
final[,-c(1:4)]
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))
chr.pos
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos), 2)-1]
cbind.data.frame(chr,pos)
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]
cbind.data.frame(chr,pos)
paste0(cross,"_","A.repl1.Ns=",A.repl1.Ns,".A.repl2.Ns=",A.repl2.Ns,".B.repl1.Ns=",B.repl1.Ns,".B.repl2.Ns=",B.repl2.Ns)
cross<-7
paste0(cross,"_","A.repl1.Ns=",A.repl1.Ns,".A.repl2.Ns=",A.repl2.Ns,".B.repl1.Ns=",B.repl1.Ns,".B.repl2.Ns=",B.repl2.Ns)
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100
paste0(cross,"_","A.repl1.Ns=",A.repl1.Ns,".A.repl2.Ns=",A.repl2.Ns,".B.repl1.Ns=",B.repl1.Ns,".B.repl2.Ns=",B.repl2.Ns)
percent.with.bothReplicates.genotyped.variants.in.B
percent.with.bothReplicates.genotyped.variants.in.A
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chr.pos,chr,pos)#
out<-paste0(outpath,cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_29nov21.csv")#
#
write.csv(final,out)
length(chr.pos)
length(chr.pos)chr.pos
chr.pos
out<-paste0(outpath,cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_29nov21.csv")
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"
out<-paste0(outpath,cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_29nov21.csv")#
#
write.csv(final,out)
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_29nov21.csv")#
#
write.csv(final,out)
names(final[,-c(1:4)])
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr7.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr7.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-7#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_29nov21.csv")#
#
write.csv(final,out)
head(final)
dist(final$pos)
as.numeric(dist(final$pos))
c(dist(final$pos))
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr25.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr25.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-25#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_29nov21.csv")#
#
write.csv(final,out)
head(final)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr9.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr9.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-25#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)
A
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]
i
A
dim(A)
dim(A)d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr9.BW.L.F.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr9.BW.S.M.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-9#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_29nov21.csv")#
#
write.csv(final,out)
length(ChrPos)
length(chrPos)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr29.BW.L.F.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr29.BW.S.M.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-29#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr25.BW.L.F.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr25.BW.S.M.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-25#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr9.BW.L.F.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr9.BW.S.M.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-9#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr7.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr7.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-7#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr29.BW.L.F.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr29.BW.S.M.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-29#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr29.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr29.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-29#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100
percent.with.bothReplicates.genotyped.variants.in.B
percent.with.bothReplicates.genotyped.variants.in.A
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
tempB
dim(tempB)
tempB[2]/dim(B)[2]
tempB[2]
dim(tempB)[2]/dim(B)[2]
dim(A)
dim(B)
length(intersect(names(tempB),names(tempA)))
length(intersect(names(tempB),names(tempA)))/dim(A)[2]
round(length(intersect(names(tempB),names(tempA)))/dim(A)[2],3)
round(length(intersect(names(tempB),names(tempA)))/dim(A)[2],3)*100
percent.seq.both.replicates.and.parents<-round(length(intersect(names(tempB),names(tempA)))/dim(A)[2],3)*100
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr29.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr29.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-29#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
#
percent.seq.both.replicates.and.parents<-round(length(intersect(names(tempB),names(tempA)))/dim(A)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_perecent.seq.both.repl.and.grandp=",percent.seq.both.replicates.and.parents,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr7.BW.L.M.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr7.BW.S.F.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-7#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
#
percent.seq.both.replicates.and.parents<-round(length(intersect(names(tempB),names(tempA)))/dim(A)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_perecent.seq.both.repl.and.grandp=",percent.seq.both.replicates.and.parents,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr25.BW.L.F.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr25.BW.S.M.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-25#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
#
percent.seq.both.replicates.and.parents<-round(length(intersect(names(tempB),names(tempA)))/dim(A)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_perecent.seq.both.repl.and.grandp=",percent.seq.both.replicates.and.parents,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
d<-read.csv("/Volumes/Marius.3/WORKING/Blackwater.HC.RAD_oct20/Variants/ALL.HC.Blackwater_initialStringentGenotypeFilter_minMAF.0.1_minMAC.1_minFreqGenoCalls.0.5_XCHRout_YCHRout_replin_IndN.100_snpN.22873_SNPmatrix.csv")#
ID.A<-"cr9.BW.L.F.repl" # cr25.BW.L.F.repl // cr7.BW.L.M.repl // cr9.BW.L.F.repl // cr29.BW.L.M.repl#
ID.B<-"cr9.BW.S.M.repl" # cr25.BW.S.M.repl // cr7.BW.S.F.repl // cr9.BW.S.M.repl // cr29.BW.S.F.repl#
cross<-9#
outpath<-"/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Grandparents/"#
#
A<-d[grep(ID.A,d$ID),]#
A.repl1.Ns<-round(length(which(A[1,]=="N"))/dim(A)[2],3)*100#
A.repl2.Ns<-round(length(which(A[2,]=="N"))/dim(A)[2],3)*100#
tempA<-A[,which(A[1,]!="N")]#
tempA<-tempA[,which(tempA[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.A<-round(dim(tempA)[2]/dim(A)[2],3)*100#
#
B<-d[grep(ID.B,d$ID),]#
B.repl1.Ns<-round(length(which(B[1,]=="N"))/dim(B)[2],3)*100#
B.repl2.Ns<-round(length(which(B[2,]=="N"))/dim(B)[2],3)*100#
#
tempB<-B[,which(B[1,]!="N")]#
tempB<-tempB[,which(tempB[2,]!="N")]#
percent.with.bothReplicates.genotyped.variants.in.B<-round(dim(tempB)[2]/dim(B)[2],3)*100#
#
percent.seq.both.replicates.and.parents<-round(length(intersect(names(tempB),names(tempA)))/dim(A)[2],3)*100#
homos<-c("A","G","C","T")#
#
good.A<-c(1:4)#
#
for(i in 5:length(A[1,])){#
#
	if(length(grep("N",A[,i]))==0){#
		if(A[1,i]==A[2,i]){#
			if(length(intersect(A[1,i],homos))==1){#
				good.A<-c(good.A,i)}#
				}#
		}#
}#
#
A.good<-A[,good.A]#
#
good.B<-c(1:4)#
#
for(i in 5:length(B[1,])){#
#
	if(length(grep("N",B[,i]))==0){#
		if(B[1,i]==B[2,i]){#
			if(length(intersect(B[1,i],homos))==1){#
				good.B<-c(good.B,i)}#
				}#
		}#
}#
#
B.good<-B[,good.B]#
shared.pos<-intersect(names(B.good),names(A.good))#
B.good<-B.good[,shared.pos]#
A.good<-A.good[,shared.pos]#
#
good<-rbind.data.frame(B.good,A.good)#
#
retain<-c(1:4)#
for(i in 5:length(good[1,])){#
	if(length(unique(good[,i]))!=1){#
		retain<-c(retain,i)}#
}#
#
final<-good[,retain]#
#
chrPos<-names(final[,-c(1:4)])#
chr.pos<-unlist(strsplit(names(final[,-c(1:4)]),"_"))#
#
chr<-chr.pos[seq(1, length(chr.pos), 2)]#
pos<-chr.pos[seq(1, length(chr.pos)+1, 2)-1]#
final<-cbind.data.frame(chrPos,chr,pos)#
#
SNPs<-length(chrPos)#
#
out<-paste0(outpath,"cross=",cross,"_","percent.markers.genotyped.A=",percent.with.bothReplicates.genotyped.variants.in.A,".percent.markers.genotyped.B=",percent.with.bothReplicates.genotyped.variants.in.B,"_perecent.seq.both.repl.and.grandp=",percent.seq.both.replicates.and.parents,"_SNPs=",SNPs,"_29nov21.csv")#
#
write.csv(final,out)
1400*(2/3)
#########################################################
#########################################################
# Principle component analysis ##########################
# Marius, 10sept18 ######################################
#########################################################
# Comment on how to code missing data in fasta-seq:#
# it seems that it doesn't matter whether missing#
# nucleotide calls are coded as '?', 'N' or '-'.#
#########################################################
rm(list=ls())#
d<-read.csv("/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Inversions, LC and global/inversionPrimer_design/inversion.chrI_subset_4oct21_SNPmatrix.csv",header=T, stringsAsFactor=F)#
ind.info<-d[,1]#
d<-d[,-1]#
#
homo<-c('A','C','G','T')#
hetero<-c('W','M','K','Y','R','S')#
# Chose option#
replaceN<-'all' # 'within' (resample genotpyes for 'N' within populations), 'all' (resample genotypes for 'N' across all individuals), 'excl' (exclude all SNPs with any missing data)#
#
## Reduce to certain individuals#
#ref<-read.csv("/Volumes/Marius.3/WORKING/HabitatChoice_Northy_F2/DATA/RelatednessAnalysis/F2.to.GPcross.assignment_8jan20.csv")#
#ref<-subset(ref,ref[,3]==8)#
#d<-d[match(ref[,2],d[,2],),]#
### OPTION 1 ###
if(replaceN=="within"){#
pops<-c('L','S')#
dd<-NULL#
## Replace 'N' by a random base from the same population#
# Do this population-wise#
for(p in 1:length(pops)){#
    sub<-d[grep(pops[p],d$Recapture.habitat),] # Adjust#
    # Go through each locus (column) and replace N's by sampling from the called genotypes with a probability matching their frequency#
    for(l in 5:length(sub[1,])){#
        # What genotypes (exclduing 'N') are available at this locus#
        present<-names(sort(table(sub[,l]),decreasing=T)[c(which(names(sort(table(sub[,l]),decreasing=T))!='N'))])#
        # If the position is polymorphic within the population:#
        if(length(setdiff(present,hetero))>1){#
            # Infer the major 'allele', the minor 'allele' and the ambiguity name for heterozygous genotypes#
            major<-setdiff(present,hetero)[1]#
            minor<-setdiff(present,hetero)[2]#
            het<-setdiff(present,homo)#
            # Count the occurence of each genotype and calcualte their frequency within the population#
            majorCount<-as.numeric(sort(table(sub[,l]),decreasing=T)[c(which(names(sort(table(sub[,l]),decreasing=T))!='N'))][1])#
            minorCount<-as.numeric(sort(table(sub[,l]),decreasing=T)[c(which(names(sort(table(sub[,l]),decreasing=T))!='N'))][2])#
            heteroCount<-as.numeric(sort(table(sub[,l]),decreasing=T)[c(which(names(sort(table(sub[,l]),decreasing=T))!='N'))][names(sort(table(sub[,l]),decreasing=T)[c(which(names(sort(table(sub[,l]),decreasing=T))!='N'))])==het])#
            majorFreq<-majorCount/sum(majorCount,minorCount,heteroCount)#
            minorFreq<-minorCount/sum(majorCount,minorCount,heteroCount)#
            heteroFreq<-heteroCount/sum(majorCount,minorCount,heteroCount)#
            # If there are missing genotypes at this locus (N's), then replace them by randomly sample from the available genotypes within the populations#
            missVal<-which(sub[,l]=="N")#
            if(length(missVal)!=0){#
            for(r in 1:length(missVal)){#
                sub[missVal[r],l]<-sample(c(major,minor,het),1,prob=c(majorFreq,minorFreq,heteroFreq))}#
            }#
        }#
        # If the position is not within the population#
        if(length(setdiff(present,hetero))==1){#
            # If there are missing genotypes, relace them with the allele that is otherwise called in the respective population#
            missVal<-which(sub[,l]=="N")#
            if(length(missVal)!=0){#
            for(r in 1:length(missVal)){#
                sub[missVal[r],l]<-setdiff(present,hetero)}#
            }#
        }#
    }#
    # After fillingn up genotype gaps witin a population for each locus, fuse the genotpyes to the pbject 'dd'#
    dd<-rbind(dd,sub)#
    }#
}#
#
### OPTION 2 ###
if(replaceN=="all"){#
#
## Replace 'N' by a random base from the same population#
# Do this population-wise#
for(l in 5:length(d[1,])){#
        # What genotypes (excluding 'N') are available at this locus#
        if(length(grep("N",d[,l]))!=0){#
            Ns<-which(d[,l]=="N")#
            for(i in 1:length(Ns)){#
                d[Ns[i],l]<-sample(d[-which(d[,l]=="N"),l],1)#
                }#
        }#
    }#
dd<-d#
}#
#
### OPTION 3 ###
dim(d)#
if(replaceN=="excl"){#
out<-NULL#
## Replace 'N' by a random base from the same population#
# Do this population-wise#
for(l in 5:length(d[1,])){#
        # What genotypes (excluding 'N') are available at this locus#
        if(length(grep("N",d[,l]))!=0){#
            out<-c(out,l)}#
        }#
    dd<-d[,-out]#
}#
dim(dd)#
#
# Now, replace the 'major' allele at each locus across all populations with '0', the minor allele with '1', and heterozygotes with '0.5'#
for(i in 1:length(dd[1,])){#
    major<-setdiff(sort(names(table(dd[,i])),decreasing=TRUE),hetero)[1]#
    minor<-setdiff(sort(names(table(dd[,i])),decreasing=TRUE),hetero)[2]#
    dd[which(dd[,i]==major),i]<-'0'#
    dd[which(dd[,i]==minor),i]<-'1'#
    dd[c(which(dd[,i]!=1 & dd[,i]!=0)),i]<-0.5}#
#
dd[,c(1:dim(dd)[2])] <- sapply(dd[,c(1:dim(dd)[2])],as.numeric)#
row.names(dd)<-ind.info#
#
# Make all numeric, except first two columns#
# PCA: option 1#
library(ggplot2)#
library(ggfortify)#
library(ape)#
prcomp(dd[,c(1:dim(dd)[2])]), data = dd, colour = 'habitat', label = TRUE, label.size = 4)#
library(FactoMineR)#
library(factoextra)#
pca<-PCA(dd, graph = FALSE)#
#
# How many principle components are informative?:#
fviz_eig(pca, addlabels = TRUE)#
fviz_pca_ind(pca,#
             axes = c(1, 2),#
             title = "Northy lake & Stream; min MAF = 0.2, minDistbetweenSNPs = 10bp; 19,458 SNPs; random-replaced; 3july20",#
             #col.ind = dd$general.habitat, # color by groups#
             addEllipses = TRUE, ellipse.type = "confidence",#
             legend.title = "Habitat",#
             pointshape = 21,#
             labelsize = 2,#
             pointsize = 2.5,#
             )
pca.2<-prcomp(dd, scale. = T) # neglect the lake-type column#
pc1<-pca.2$x[,1]#
final.data<-cbind(row.names(dd),pc1)#
#
plot.info<-rep("FW",dim(dd)[1])#
plot.info[grep('Marine',row.names(dd))]<-"M"#
final.data<-cbind(row.names(dd),plot.info,pc1)#
final.data<-data.frame(final.data)#
final.data$pc1<-as.numeric(as.character(final.data$pc1))#
#
plot(final.data[,3])#
hist(final.data[,3],breaks=14,main="PC1 of individuals for inversion 1")#
#
library(ggplot2)#
ggplot(final.data, aes(x = pc1, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
pca.2<-prcomp(dd, scale. = T) # neglect the lake-type column#
pc1<-pca.2$x[,1]#
final.data<-cbind(row.names(dd),pc1)#
#
plot.info<-rep("FW",dim(dd)[1])#
plot.info[grep('Marine',row.names(dd))]<-"M"#
final.data<-cbind(row.names(dd),plot.info,pc1)#
final.data<-data.frame(final.data)#
final.data$pc1<-as.numeric(as.character(final.data$pc1))#
#
plot(final.data[,3])#
hist(final.data[,3],breaks=14,main="PC1 of individuals for inversion 1")#
#
library(ggplot2)#
ggplot(final.data, aes(x = pc2, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
pca.2<-prcomp(dd, scale. = T) # neglect the lake-type column#
pc1<-pca.2$x[,1]#
pc2<-pca.2$x[,2]#
final.data<-cbind(row.names(dd),pc1,pc2)#
#
plot.info<-rep("FW",dim(dd)[1])#
plot.info[grep('Marine',row.names(dd))]<-"M"#
final.data<-cbind(row.names(dd),plot.info,pc1,pc2)#
final.data<-data.frame(final.data)#
final.data$pc1<-as.numeric(as.character(final.data$pc1))#
#
plot(final.data[,3])#
hist(final.data[,3],breaks=14,main="PC1 of individuals for inversion 1")#
#
library(ggplot2)#
ggplot(final.data, aes(x = pc1, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
library(ggplot2)#
ggplot(final.data, aes(x = pc2, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
plot.info
pc2
pc1
library(ggplot2)#
ggplot(final.data, aes(x = pc2, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
final.data
head(final.data)
library(ggplot2)#
ggplot(final.data, aes(x = pc2, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
library(ggplot2)#
ggplot(final.data, aes(x = pc1, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
pc2
pc1
hist(final.data$pc1)
hist(final.data$pc2)
library(ggplot2)#
ggplot(final.data, aes(x = as.numeric(pc2), fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
fviz_pca_ind(pca,#
             axes = c(1, 2),#
             title = "Northy lake & Stream; min MAF = 0.2, minDistbetweenSNPs = 10bp; 19,458 SNPs; random-replaced; 3july20",#
             #col.ind = dd$general.habitat, # color by groups#
             addEllipses = TRUE, ellipse.type = "confidence",#
             legend.title = "Habitat",#
             pointshape = 21,#
             labelsize = 2,#
             pointsize = 2.5,#
             )
which(final.data$pc1 > -20 & final.data$pc1 < 50)
which(final.data$pc1 > -20 && final.data$pc1 < 50)
which(final.data$pc1 > -20)
intersect(which(final.data$pc1 > -20), which(final.data$pc1 < 20))
intersect(which(final.data$pc1 > -15), which(final.data$pc1 < 20))
intersect(which(final.data$pc1 > -15), which(final.data$pc1 < 50))
final.data[intersect(which(final.data$pc1 > -15), which(final.data$pc1 < 50)),]
intersect(which(final.data$pc1 > -15), which(final.data$pc1 < 50))
which(final.data$pc1 < 50)
dim(final.data$pc1)
length(final.data$pc1)
hist(final.data$pc1)
library(ggplot2)#
ggplot(final.data, aes(x = pc1, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
fviz_pca_ind(pca,#
             axes = c(1, 2),#
             title = "Northy lake & Stream; min MAF = 0.2, minDistbetweenSNPs = 10bp; 19,458 SNPs; random-replaced; 3july20",#
             #col.ind = dd$general.habitat, # color by groups#
             addEllipses = TRUE, ellipse.type = "confidence",#
             legend.title = "Habitat",#
             pointshape = 21,#
             labelsize = 2,#
             pointsize = 2.5,#
             )
pca
pc1<-pca$x[,1]#
pc2<-pca$x[,2]#
final.data<-cbind(row.names(dd),pc1,pc2)#
#
plot.info<-rep("FW",dim(dd)[1])#
plot.info[grep('Marine',row.names(dd))]<-"M"#
final.data<-cbind(row.names(dd),plot.info,pc1,pc2)#
final.data<-data.frame(final.data)#
final.data$pc1<-as.numeric(as.character(final.data$pc1))#
#
plot(final.data[,3])#
hist(final.data[,3],breaks=14,main="PC1 of individuals for inversion 1")#
#
library(ggplot2)#
ggplot(final.data, aes(x = pc1, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
pc1<-pca$x[,1]#
pc2<-pca$x[,2]
pcq
pc1
pca$x
pca<-PCA(dd, graph = FALSE)#
#
# How many principle components are informative?:#
fviz_eig(pca, addlabels = TRUE)#
fviz_pca_ind(pca,#
             axes = c(1, 2),#
             title = "Northy lake & Stream; min MAF = 0.2, minDistbetweenSNPs = 10bp; 19,458 SNPs; random-replaced; 3july20",#
             #col.ind = dd$general.habitat, # color by groups#
             addEllipses = TRUE, ellipse.type = "confidence",#
             legend.title = "Habitat",#
             pointshape = 21,#
             labelsize = 2,#
             pointsize = 2.5,#
             )#
#####
#
pc1<-pca$x[,1]#
pc2<-pca$x[,2]
pc1
pca
pca$eig
pca$ind
head(pca$ind)
ca$ind$coord
pca$ind$coord
pca$ind$coord[,1]
pc1<-pca$ind$coord[,1]#
pc2<-pca$ind$coord[,2]#
final.data<-cbind(row.names(dd),pc1,pc2)#
#
plot.info<-rep("FW",dim(dd)[1])#
plot.info[grep('Marine',row.names(dd))]<-"M"#
final.data<-cbind(row.names(dd),plot.info,pc1,pc2)#
final.data<-data.frame(final.data)#
final.data$pc1<-as.numeric(as.character(final.data$pc1))#
#
plot(final.data[,3])#
hist(final.data[,3],breaks=14,main="PC1 of individuals for inversion 1")#
#
library(ggplot2)#
ggplot(final.data, aes(x = pc1, fill = plot.info)) +#
  geom_histogram(position = "identity", alpha = 0.4)
fviz_pca_ind(pca,#
             axes = c(1, 2),#
             title = "Northy lake & Stream; min MAF = 0.2, minDistbetweenSNPs = 10bp; 19,458 SNPs; random-replaced; 3july20",#
             #col.ind = dd$general.habitat, # color by groups#
             addEllipses = TRUE, ellipse.type = "confidence",#
             legend.title = "Habitat",#
             pointshape = 21,#
             labelsize = 2,#
             pointsize = 2.5,#
             )
# PRINCIPAL COMPONENT ANALYSIS#
# marius, 23 nov 2021#
#
## Here, I demonstrate how to use a PCA based on some exemplary data from stickleback from Lake Constance#
#
# What is PCA?:#
# https://georgemdallas.wordpress.com/2013/10/30/principal-component-analysis-4-dummies-eigenvectors-eigenvalues-and-dimension-reduction/#
#
# Note that if you have categorical variables instead of continuous numeric variables, you should use#
# a "Multiple Correspondence analysis" instead of PCA. It's very similar to interpret and run. See here:#
# http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/114-mca-multiple-correspondence-analysis-in-r-essentials/#
#
rm(list=ls()) # remove everhing hidden in R's history#
#
library(FactoMineR) # Used for visualization#
library(factoextra) # Used for visualization#
library(car) # to call the Anova#
library(visreg) # for plotting the model results#
#
# Read in data#
data<-read.csv("/Users/Marius/Dropbox/2. SCIENCE PRIVAT/TEACHING (LECTURES, PRACTICALS)/Courses,Practicals/IEE Research Practical 2021; R, stats, size-corr lecture/Full data set/LC.data_allData_inclSizeCorr.csv",stringsAsFactor=F)#
head(data)
## PCA does not tolerate missing data (NA); there are two ways to replace your missing data:#
#
# 1) Replace all cells with NA with a random value from the respective column (quite conservative method)#
#data[] <- lapply(data,function(x) replace(x,is.na(x), sample(x[!is.na(x)],sum(is.na(x)))))#
#
# or 2) Fancy method to fill in missing data using a data inputation package:#
library(missMDA) # this package is used for inputation#
# estimate number of components#
data.pca.input<-data[,c(min(grep("sizeCorr",names(data))):max(grep("sizeCorr",names(data))))]#
dim(data.pca.input)#
nb <- estim_ncpPCA(data.pca.input, ncp.min=3, ncp.max=5)#
# actual impute#
data.pca.input <- imputePCA(data.pca.input, ncp=nb$ncp)$completeObs#
data[,c(min(grep("sizeCorr",names(data))):max(grep("sizeCorr",names(data))))]<-data.pca.input#
#
## Now call the PCA using prcomp(); exlude all columns that do NOT hold any size-corrected data (unless you#
# want to run your PCA on your un-corrected data!#
names(data)#
pca<-prcomp(data[,-c(1:28)], scale. = T) # exclude columns that do NOT contain any (size-correted) trait data for analysis#
#
## How many princal component axes are informative?:#
fviz_eig(pca, addlabels = TRUE) # Scree-plot (how much of the total variation does each PC-axis explain?)
## Plot the PCA (note that PC1 is called Dim1, PC is called Dim2, etc)#
fviz_pca_ind(pca,#
             #geom.ind = "point", # show points only (nbut not "text")#
             axes = c(1, 2), # chose the axes you want to show#
             title = "Title", # Give your plot a title#
             #col.ind = d$original.habitat, # Specify the grouping variable? Here, it is "Habitat"#
             col.ind = paste0(data$Habitat,"_",data$sex), # You can also combine multiple grouping variables, here Habitat & Sex#
             addEllipses = TRUE, ellipse.type = "confidence",#
             legend.title = "habitat by sex", # Name the variable you plotted#
             pointshape = 21,#
             labelsize = 2,#
             pointsize = 3,#
             )
## Show loadings (how does each trait influence the PCA axes?)#
fviz_pca_var(pca,#
    col.var = "contrib", # Color by contributions to the PC#
    gradient.cols = c("#E7B800", "#FC4E07"),#
    repel = TRUE     # Avoid text overlapping#
    )
pca
summary(pca)
fviz_contrib(pca, choice = "var", axes = 1, top = 10)
pca[,1]
pca$x
pca$rotation[,c(1,2)]
sum(pca$rotation[,c(1)])
sum(pca$rotation[,c(2)])
pca
pca$x
pca$rotation
pca$rotation[,c(1,2)]
480/1500
4600/2000
460/2000
460/6000
# script for analysing the output of SLiM simulations#
# 29-07-2021 / altered on 18-11-2021#
#
library("tidyverse")#
library("gridExtra") # for plotting#
#
# read in simulation data -------------------------------------------------#
setwd("/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Github/inversion_constraint")#
#
haplo_files.all <- list.files("01_simulations/data/output/haplotypes", full.names = TRUE)#
fitness_files.all <- list.files("01_simulations/data/output/fitness", full.names = TRUE)#
#
# check from how many simulations there are output files, and plot output for every individual simulation#
seeds<-NULL#
info<-NULL#
for(i in 1:length(haplo_files.all)){#
    seeds<-c(seeds,unlist(strsplit(haplo_files.all[i],split="_"))[4]) # retreive the unique seed-ID of each simulation file#
    info<-c(info,paste0(unlist(strsplit(unlist(strsplit(haplo_files.all[i],split="_"))[2],split="/"))[5],"_",unlist(strsplit(haplo_files.all[i],split="_"))[3])) # simulation settings#
}#
#
######################
# function for reading in a single simulation file#
# and adding its meta data (from the file name) as columns#
# handles haplotype ("hap") and fitness files separately#
#
add_sim_info_as_columns <- function(x){#
  # seed#
  if(length(grep("haps",x))==1){#
      seed <- gsub("*_haps.txt", "", x) %>% gsub(".*_", "", .)}#
  if(length(grep("fitness",x))==1){#
      seed <- gsub("*_fitness.txt", "", x) %>% gsub(".*_", "", .)}#
  # simulation type (inversion present or absent?)#
  ifelse(length(grep(".inv=1_",x))==1,sim_type <- "inversion.present",sim_type <- "inversion.absent")#
  # mutation Rate#
  mu <- gsub(".*.mutR=", "", x) %>% gsub(".recR.*.", "", .)#
  out_df <- read.table(x)#
  out_df <- data.frame(sim_type, seed, mu, out_df)#
  if (grepl("hap", x)){#
    names(out_df) <- c("sim_type", "seed", "mu", "gen", "pop", "hap_class", "haplotype", "frequency")#
  } else if (grepl("fitness", x)){#
    names(out_df) <- c("sim_type", "seed", "mu", "gen", "pop", "mean_fitness", "optimal_adaptation")#
  }#
  out_df#
}#
####################
#
for(s in 1:length(seeds)){ # file-loop opens#
    haplo_files<-haplo_files.all[s]#
    fitness_files<-fitness_files.all[s]#
    # read in haplotype frequencies#
    haplo_df <- lapply(haplo_files, add_sim_info_as_columns) %>%#
    bind_rows()#
#
    # read in fitness data#
    fitness_df <- lapply(fitness_files, add_sim_info_as_columns) %>%#
    bind_rows()#
    # header for the plot containing all infos of the simulation#
    header<-unlist(strsplit(gsub("*.inv*.*", "", fitness_files),"_"))[3]#
#
    # (1) plot simulation data ----------------------------------------------------#
#
    # plot of mean fitness vs generations#
    fit_plot <- fitness_df %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        ggplot(aes(x = gen, y = mean_fitness, group = interaction(pop, seed), color = pop)) + # "pop" is just set so all panels are in line#
        geom_line(size = 0.3) +#
        #facet_grid(mu~sim_type) + # option 1#
        facet_grid(mu~pop)+#
        theme_bw() +#
        ylim(0.88,1.22) +#
        xlab("Generation")+#
        ylab("Fitness")+#
        scale_color_brewer(palette = "Set1") +#
        labs(title=header,color="population")#
    #ggsave(paste0("02_analysis/plots/fitness_plot_",info[s],"_",seeds[s],".pdf"), plot = fit_plot, device = "pdf", width = 7, height = 5)#
    # (2) plot simulation data ----------------------------------------------------#
#
    # plot adaptation vs generations#
    adapt_plot <- fitness_df %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        ggplot(aes(x = gen, y = optimal_adaptation, group = interaction(pop, seed), color = pop)) + # "pop" is just set so all panels are in line#
        geom_line(size = 0.3) +#
        #facet_grid(mu~sim_type) + # option 1#
        facet_grid(mu~pop)+#
        theme_bw() +#
        ylim(0.82,1.02) +#
        xlab("Generation")+#
        ylab("Adaptation")+#
        scale_color_brewer(palette = "Set1") +#
        labs(title=header,color="population")#
    #ggsave(paste0("02_analysis/plots/fitness_plot_",info[s],"_",seeds[s],".pdf"), plot = adapt_plot, device = "pdf", width = 7, height = 5)#
    # (3) plot of haplotype freq vs generations -----------------------------------#
    haplo_palatte <- colorRampPalette(c("blue", "red"))(8)#
    haplo_palatte <- haplo_palatte[c(1,1,4,4,4,4,8,8)]#
#
    hap_plot <- haplo_df %>%#
        mutate(sim_type = gsub("three_pop_", "", sim_type)) %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        filter(hap_class == "hap") %>%#
        ggplot(aes(x = gen, y = frequency, group = interaction(pop, seed, haplotype), color = haplotype)) +#
        geom_line(size = 0.2) +#
        ylim(0,1) +#
        facet_grid(mu~pop)+#
        theme_bw() +#
        xlab("Generation")+#
        ylab("Frequency")+#
        scale_color_manual(values = haplo_palatte) +#
        labs(title="Detailed haplotype for the selected loci")#
#
    #ggsave(paste0("02_analysis/plots/haplo_plot_",info[s],"_",seeds[s],".pdf"), plot = hap_plot, device = "pdf", width = 7, height = 5)#
    # (4) plot haplotype-genotypes vs generations ----------------------------------#
    hap_plot_B <- haplo_df %>%#
        mutate(sim_type = gsub("three_pop_", "", sim_type)) %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        filter(hap_class == "hap")#
     pops<-unique(hap_plot_B$pop)#
     generations<-unique(hap_plot_B$gen)#
     hap_plot_B_genotypes<-NULL#
     for(g in 1:length(generations)){#
        # This is "farmer-style coding", but it works ;-)#
        # Collapse info into understandable haplotypes#
        for(p in 1:length(pops)){#
            sub<-hap_plot_B[intersect(which(hap_plot_B$gen==generations[g]),which(hap_plot_B$pop==pops[p])),]#
            AA<-cbind.data.frame(sub[1,c(1:5)],"m1/m1",sum(sub$frequency[which(sub$haplotype == "113" | sub$haplotype == "114")]))#
            names(AA)[6]<-"haplotype.genotype"#
            names(AA)[7]<-"frequency"#
            BB<-cbind.data.frame(sub[1,c(1:5)],"m2/m2",sum(sub$frequency[which(sub$haplotype == "223" | sub$haplotype == "224")]))#
            names(BB)<-names(AA)#
            AB<-cbind.data.frame(sub[1,c(1:5)],"m1/m2",sum(sub$frequency[which(sub$haplotype == "123" | sub$haplotype == "124")]))#
            names(AB)<-names(AA)#
            BA<-cbind.data.frame(sub[1,c(1:5)],"m2/m1",sum(sub$frequency[which(sub$haplotype == "213" | sub$haplotype == "214")]))#
            names(BA)<-names(AA)#
            hap_plot_B_genotypes<-rbind(hap_plot_B_genotypes,rbind(AA,AB,BA,BB))#
            }#
        }#
        hap_geno_plot<-ggplot(hap_plot_B_genotypes,aes(x = gen, y = frequency, group = interaction(pop, seed, haplotype.genotype), color = haplotype.genotype)) +#
        geom_line(size = 0.3) +#
        ylim(0,1) +#
        facet_grid(mu~pop) +#
        theme_bw() +#
        scale_color_manual(values=c("blue", "darkorchid1", "aquamarine3","red")) +#
        xlab("Generation") +#
        ylab("Frequency") +#
        labs(title="Summarized haplotype for the selected loci", color="haplotype")#
#
    #ggsave(paste0("02_analysis/plots/haplo_plot_",info[s],"_",seeds[s],".pdf"), plot = hap_plot, device = "pdf", width = 7, height = 5)#
    # For plotting the inversion frequency within each population: it doesn't seem to be very informative#
    hap_plot_inversion <- haplo_df %>%#
        mutate(sim_type = gsub("three_pop_", "", sim_type)) %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        filter(haplotype == "inversion") %>%#
        ggplot(aes(x = gen, y = frequency, group = interaction(pop, seed, hap_class), color = hap_class)) +#
        geom_line(size = 0.2) +#
        ylim(0,1) +#
        facet_grid(mu~pop)+#
        theme_bw() +#
        xlab("Generation")+#
        ylab("Frequency")+#
        labs(title="Inversion genotype", color="genotype")#
#
    # Plot the fitness-plot and th haplotype-plots underneath one another into the same plot#
    pdf(paste0("02_analysis/plots/",info[s],"_",seeds[s],".pdf"), width = 10, height = 15)#
    grid.arrange(fit_plot, adapt_plot, hap_plot,hap_geno_plot, hap_plot_inversion, nrow=5, top = haplo_df[1,1])#
    dev.off()#
} # file-loop closes
# script for analysing the output of SLiM simulations#
# 29-07-2021 / altered on 18-11-2021#
#
library("tidyverse")#
library("gridExtra") # for plotting#
#
# read in simulation data -------------------------------------------------#
setwd("/Users/Marius/Dropbox/My Mac (Marius’s MacBook Pro)/Desktop/Github/inversion_constraint")#
#
haplo_files.all <- list.files("01_simulations/data/output/haplotypes", full.names = TRUE)#
fitness_files.all <- list.files("01_simulations/data/output/fitness", full.names = TRUE)#
#
# check from how many simulations there are output files, and plot output for every individual simulation#
seeds<-NULL#
info<-NULL#
for(i in 1:length(haplo_files.all)){#
    seeds<-c(seeds,unlist(strsplit(haplo_files.all[i],split="_"))[4]) # retreive the unique seed-ID of each simulation file#
    info<-c(info,paste0(unlist(strsplit(unlist(strsplit(haplo_files.all[i],split="_"))[2],split="/"))[5],"_",unlist(strsplit(haplo_files.all[i],split="_"))[3])) # simulation settings#
}#
#
######################
# function for reading in a single simulation file#
# and adding its meta data (from the file name) as columns#
# handles haplotype ("hap") and fitness files separately#
#
add_sim_info_as_columns <- function(x){#
  # seed#
  if(length(grep("haps",x))==1){#
      seed <- gsub("*_haps.txt", "", x) %>% gsub(".*_", "", .)}#
  if(length(grep("fitness",x))==1){#
      seed <- gsub("*_fitness.txt", "", x) %>% gsub(".*_", "", .)}#
  # simulation type (inversion present or absent?)#
  ifelse(length(grep(".inv=1_",x))==1,sim_type <- "inversion.present",sim_type <- "inversion.absent")#
  # mutation Rate#
  mu <- gsub(".*.mutR=", "", x) %>% gsub(".recR.*.", "", .)#
  out_df <- read.table(x)#
  out_df <- data.frame(sim_type, seed, mu, out_df)#
  if (grepl("hap", x)){#
    names(out_df) <- c("sim_type", "seed", "mu", "gen", "pop", "hap_class", "haplotype", "frequency")#
  } else if (grepl("fitness", x)){#
    names(out_df) <- c("sim_type", "seed", "mu", "gen", "pop", "mean_fitness", "optimal_adaptation")#
  }#
  out_df#
}#
####################
#
for(s in 1:length(seeds)){ # file-loop opens#
    haplo_files<-haplo_files.all[s]#
    fitness_files<-fitness_files.all[s]#
    # read in haplotype frequencies#
    haplo_df <- lapply(haplo_files, add_sim_info_as_columns) %>%#
    bind_rows()#
#
    # read in fitness data#
    fitness_df <- lapply(fitness_files, add_sim_info_as_columns) %>%#
    bind_rows()#
    # header for the plot containing all infos of the simulation#
    header<-unlist(strsplit(gsub("*.inv*.*", "", fitness_files),"_"))[3]#
#
    # (1) plot simulation data ----------------------------------------------------#
#
    # plot of mean fitness vs generations#
    fit_plot <- fitness_df %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        ggplot(aes(x = gen, y = mean_fitness, group = interaction(pop, seed), color = pop)) + # "pop" is just set so all panels are in line#
        geom_line(size = 0.3) +#
        #facet_grid(mu~sim_type) + # option 1#
        facet_grid(mu~pop)+#
        theme_bw() +#
        ylim(0.88,1.22) +#
        xlab("Generation")+#
        ylab("Fitness")+#
        scale_color_brewer(palette = "Set1") +#
        labs(title=header,color="population")#
    #ggsave(paste0("02_analysis/plots/fitness_plot_",info[s],"_",seeds[s],".pdf"), plot = fit_plot, device = "pdf", width = 7, height = 5)#
    # (2) plot simulation data ----------------------------------------------------#
#
    # plot adaptation vs generations#
    adapt_plot <- fitness_df %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        ggplot(aes(x = gen, y = optimal_adaptation, group = interaction(pop, seed), color = pop)) + # "pop" is just set so all panels are in line#
        geom_line(size = 0.3) +#
        #facet_grid(mu~sim_type) + # option 1#
        facet_grid(mu~pop)+#
        theme_bw() +#
        ylim(0.82,1.02) +#
        xlab("Generation")+#
        ylab("Adaptation")+#
        scale_color_brewer(palette = "Set1") +#
        labs(title=header,color="population")#
    #ggsave(paste0("02_analysis/plots/fitness_plot_",info[s],"_",seeds[s],".pdf"), plot = adapt_plot, device = "pdf", width = 7, height = 5)#
    # (3) plot of haplotype freq vs generations -----------------------------------#
    haplo_palatte <- colorRampPalette(c("blue", "red"))(8)#
    haplo_palatte <- haplo_palatte[c(1,1,4,4,4,4,8,8)]#
#
    hap_plot <- haplo_df %>%#
        mutate(sim_type = gsub("three_pop_", "", sim_type)) %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        filter(hap_class == "hap") %>%#
        ggplot(aes(x = gen, y = frequency, group = interaction(pop, seed, haplotype), color = haplotype)) +#
        geom_line(size = 0.2) +#
        ylim(0,1) +#
        facet_grid(mu~pop)+#
        theme_bw() +#
        xlab("Generation")+#
        ylab("Frequency")+#
        scale_color_manual(values = haplo_palatte) +#
        labs(title="Detailed haplotype for the selected loci")#
#
    #ggsave(paste0("02_analysis/plots/haplo_plot_",info[s],"_",seeds[s],".pdf"), plot = hap_plot, device = "pdf", width = 7, height = 5)#
    # (4) plot haplotype-genotypes vs generations ----------------------------------#
    hap_plot_B <- haplo_df %>%#
        mutate(sim_type = gsub("three_pop_", "", sim_type)) %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        filter(hap_class == "hap")#
     pops<-unique(hap_plot_B$pop)#
     generations<-unique(hap_plot_B$gen)#
     hap_plot_B_genotypes<-NULL#
     for(g in 1:length(generations)){#
        # This is "farmer-style coding", but it works ;-)#
        # Collapse info into understandable haplotypes#
        for(p in 1:length(pops)){#
            sub<-hap_plot_B[intersect(which(hap_plot_B$gen==generations[g]),which(hap_plot_B$pop==pops[p])),]#
            AA<-cbind.data.frame(sub[1,c(1:5)],"m1/m1",sum(sub$frequency[which(sub$haplotype == "113" | sub$haplotype == "114")]))#
            names(AA)[6]<-"haplotype.genotype"#
            names(AA)[7]<-"frequency"#
            BB<-cbind.data.frame(sub[1,c(1:5)],"m2/m2",sum(sub$frequency[which(sub$haplotype == "223" | sub$haplotype == "224")]))#
            names(BB)<-names(AA)#
            AB<-cbind.data.frame(sub[1,c(1:5)],"m1/m2",sum(sub$frequency[which(sub$haplotype == "123" | sub$haplotype == "124")]))#
            names(AB)<-names(AA)#
            BA<-cbind.data.frame(sub[1,c(1:5)],"m2/m1",sum(sub$frequency[which(sub$haplotype == "213" | sub$haplotype == "214")]))#
            names(BA)<-names(AA)#
            hap_plot_B_genotypes<-rbind(hap_plot_B_genotypes,rbind(AA,AB,BA,BB))#
            }#
        }#
        hap_geno_plot<-ggplot(hap_plot_B_genotypes,aes(x = gen, y = frequency, group = interaction(pop, seed, haplotype.genotype), color = haplotype.genotype)) +#
        geom_line(size = 0.3) +#
        ylim(0,1) +#
        facet_grid(mu~pop) +#
        theme_bw() +#
        scale_color_manual(values=c("blue", "darkorchid1", "aquamarine3","red")) +#
        xlab("Generation") +#
        ylab("Frequency") +#
        labs(title="Summarized haplotype for the selected loci", color="haplotype")#
#
    #ggsave(paste0("02_analysis/plots/haplo_plot_",info[s],"_",seeds[s],".pdf"), plot = hap_plot, device = "pdf", width = 7, height = 5)#
    # For plotting the inversion frequency within each population: it doesn't seem to be very informative#
    hap_plot_inversion <- haplo_df %>%#
        mutate(sim_type = gsub("three_pop_", "", sim_type)) %>%#
        mutate(mu = paste0("mu=", mu)) %>%#
        filter(haplotype == "inversion") %>%#
        ggplot(aes(x = gen, y = frequency, group = interaction(pop, seed, hap_class), color = hap_class)) +#
        geom_line(size = 0.2) +#
        ylim(0,1) +#
        facet_grid(mu~pop)+#
        theme_bw() +#
        xlab("Generation")+#
        ylab("Frequency")+#
        labs(title="Inversion genotype", color="genotype")#
#
    # Plot the fitness-plot and th haplotype-plots underneath one another into the same plot#
    pdf(paste0("02_analysis/plots/",info[s],"_",seeds[s],".pdf"), width = 10, height = 15)#
    grid.arrange(fit_plot, adapt_plot, hap_plot,hap_geno_plot, hap_plot_inversion, nrow=5, top = haplo_df[1,1])#
    dev.off()#
} # file-loop closes
